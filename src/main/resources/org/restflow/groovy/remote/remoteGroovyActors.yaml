imports:

- classpath:/common/types.yaml
- classpath:/common/rpc.yaml


components:

- id: StringConcatenator
  type: RemoteGroovyActor
  properties:
    step: |
      concatenatedString = stringOne + stringTwo; 
    inputs:
      stringOne:
      stringTwo:
    outputs: 
      concatenatedString:

- id: Counter
  type: RemoteGroovyActor
  properties:
    stateful: true
    step: |
      count=_status.stepCount
    inputs: 
      input:
    outputs:
      count:

- id: ConstantSource
  type: RemoteGroovyActor
  properties:
    step: |
      output=value;
    inputs: 
      value:
    outputs: 
      output:

- id: SingleUnitBuffer
  type: ConstantSource

- id: SerialAdder
  type: RemoteGroovyActor
  properties:
    flagsInputReadiness: true
    step:
      sum = addend[0] + addend[1];
    inputs: 
      addend:
        accrue: 2
    outputs: 
      sum:

- id: PrintStreamWriter
  type: GroovyActor
  properties:
    initialize: bufferedStream = null;
    step: |
      if ( printStream == null) {
        bufferedStream = new ByteArrayOutputStream();
        printStream = new PrintStream( bufferedStream );
      }
      printStream.println( message );
      if (outputImmediately) println( message );
    dispose: |
      if (outputAtWrapup && bufferedStream != null) {
        if (name != null) {
          System.out.println("*** " + name + " ***");
        }
        System.out.print( bufferedStream.toString());
      }
    inputs:
      name:
      message:
      outputImmediately:
        default: true
      outputAtWrapup:
        default: false
      printStream:
        default: ~

- id: IntegerSequenceGenerator
  type: RemoteGroovyActor
  properties:
    step: |
      if (_status.stepCount == 1) { value=initial; return; }
      value += step;
      if ( value > max) value = null;
    inputs:
      initial:
      step:
      max:
    outputs:
      value:  
    flagsInputReadiness: false
    stateful: true
    
- id: ListSource
  type: RemoteGroovyActor
  properties:
    step: |
      if ( _status.stepCountIndex < valueList.size() ) {
        value = valueList[ _status.stepCountIndex ];
      } else {
        value = null;
      }
    inputs: 
      valueList:
        type: List<Number>
    outputs: 
      value:    
    flagsInputReadiness: false
    stateful: true
  
- id: IntegerStreamMerger
  type: RemoteGroovyActor
  properties:
    step: |
      // set result to null if both inputs are null
      if ( a == null && b == null) { 
        c = null;
        return;
      }
      if ( a == null) {
        c = b;
        _status.disbleInput('a');
        return;
      }
      if ( b == null) {
        c = a;
        _status.disbleInput('b');          
        return;
      } else if ( a < b) {
        c = a;
        _status.disbleInput('b');          
        return;
      } 
      
      if ( b < a) {
        c = b;
        _status.disbleInput('a');          
        return;
      }
      c = a;
      if ( ! discardDuplicates ) {
        _status.disbleInput('a');           
      }    
    inputs: 
      a:
      b:
      discardDuplicates:
        default: false
    outputs: 
      c:    
    flagsInputReadiness: true


- id: Averager
  type: RemoteGroovyActor
  properties:
    step: |
      double sum = 0;
      int count = 0;
      
      valueList.each() { sum = sum + it }
      
      if (valueList.size() > 0) {
        average = sum / valueList.size();
      } else {
        average = null;
      }
      println getBinding()
    inputs: 
      valueList: 
        type: List<Number>
    outputs: 
      average:

- id: Multiplier
  type: RemoteGroovyActor
  properties:
    step: product=a*b
    inputs: 
      a:
      b:
    outputs: 
      product:


- id: IntegerBandpassFilter
  type: RemoteGroovyActor
  properties:
    step: |
      if ( input >= min && input <= max) {
        output = input;
      } else {
        output = null;
      }
    inputs: 
      min:
      max:
      input:
    outputs: 
      output:  

