namespace:

  module: Visualize

imports:

- classpath:/org/restflow/java/actors.yaml
- classpath:/org/restflow/directors.yaml
- classpath:/org/restflow/types.yaml 
- classpath:/org/restflow/support.yaml

types:

- id: GroovyActorLogNode
  type: GroovyActorNode
  properties:
    enableLog: true  

components:

- id: WorkflowGraph
  type: Workflow
  properties: 
    director: !ref MTDataDrivenDirector
    inputs:
      workflowName:
      restflowFile:
    nodes:
    - !lref Inputs  
    - !lref WorkflowLoader
    - !lref GenerateDot
    - !lref ConvertDotToPostScript
    - !lref Display

- id: Inputs
  type: InPortal
  properties:
    outflows:
      workflowName: /workflowName/
      restflowFile: /restflowFile/


- id: WorkflowLoader
  type: Node
  properties:
    maxConcurrency: 1
    ordered: false
    actor: !inline 
      type: ActorLoader
    constants:      
      director: !ref PublishSubscribeDirector
      runDirectory: context:/run   
    inflows:
      actorName: /workflowName/
      restflowFile: /restflowFile
      importMap: context:/import-map
    outflows:
      actor: /actor/{actorName}
    exceptions:
      java.lang.Exception: stderr:/exception/load/


- id: GenerateDot
  type: Node
  properties:
    maxConcurrency: 1
    actor: !inline
      className: org.restflow.groovy.GroovyTemplateActor
    constants:
      _template: !resource classpath:ssrl/restflow/templates/dotWorkflow.txt
    inflows:
      workflow: /actor/{actorName}
    outflows:
      view: file:/dot-file/{actorName}.dot
    exceptions:
      java.lang.Exception: stderr:/exception/generateDot/

      
- id: ConvertDotToPostScript
  type: GroovyActorNode
  properties:
    maxConcurrency: 1
    inflows:
      dot: file:/dot-file/{workflow}.dot
    actor.usesStepDirectory: true
    actor.inputs:
      workflow:
      dot:    
    actor.step: |
      println workflow
      def dotCmd = [ 'dot', '-Tps', dot.path, '-o', dot.parent + '/out.ps' ];
      println dotCmd;
      ProcessBuilder pb = new ProcessBuilder(dotCmd).redirectErrorStream(true).directory(_status.stepDirectory);
      postscript = pb.start().text;
      psFile = new File( _status.stepDirectory.toString() + '/out.ps');
    outflows:
      psFile: file:/postscript/{workflow}.ps

- id: Display
  type: GroovyActorNode
  properties:
    maxConcurrency: 1
    inflows:
      psFile: file:/postscript/{workflow}.ps
    actor.usesStepDirectory: true      
    actor.step: |
      def dotCmd = [ 'evince', psFile.path ];
      ProcessBuilder pb = new ProcessBuilder(dotCmd).redirectErrorStream(true);
      pb.start();      

      
      
      
      