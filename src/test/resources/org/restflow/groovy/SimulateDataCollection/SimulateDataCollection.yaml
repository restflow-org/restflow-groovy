
imports:
  - classpath:/org/restflow/groovy/actors.yaml
  - classpath:/org/restflow/directors.yaml

components:

  - id: SimulateDataCollection
    type: Workflow
    properties:
      director: !ref PublishSubscribeDirector
      nodes:
        - !ref LoadScreeningResults
        - !ref CalculateStrategy
        - !ref CollectDataSet
        - !ref TransformImage
        - !ref LogAverageSpotIntensity

  - id: LoadScreeningResults
    type: GroovyActorNode
    properties:
      sequences:
        crystal:               
          - {sampleId: DRT110, score: 1}
          - {sampleId: DRT240, score: 3}
          - {sampleId: DRT322, score: 4}
      actor.step: |
        name = crystal.sampleId; quality = crystal.score
      actor.outputs:
        name:
        quality:
      outflows: 
        quality: /sample/{name}/quality

  - id: CalculateStrategy
    type: GroovyActorNode
    properties: 
      actor.inputs:
        name:
        quality:
      actor.outputs:
        strategy:
      actor.step: |
        log "Evaluating sample $name.";
        if (quality < 3) {
          _status.setOutputEnable('strategy', false);
          log "Sample $name rejected due to low quality score of $quality."
        } else {
          strategy = [numImages: quality + 2, energies: [10000, 11000]];
          log "Requesting $strategy.numImages images for sample $name."
        }
      inflows:
        quality: /sample/{name}/quality
      outflows:
        strategy: /sample/{name}/strategy
      enableLog: true

  - id: CollectDataSet
    type: Node
    properties: 
      actor: !ref DataCollector
      inflows:
        runDefinition: /sample/{name}/strategy
      outflows:
        rawImage: file:/sample/{name}/images/raw/{energy}/image_{frame}.raw
      
  - id: TransformImage
    type: GroovyActorNode
    properties:
      actor.step: |
        correctedImage = Double.parseDouble(rawImage.text) * 2.0;
      inflows:
        rawImage: /sample/{id}/images/raw/{eV}/image_{frameNumber}.raw
      outflows:
        correctedImage: file:/data/{id}/image_{eV}_{frameNumber}.img

  - id: LogAverageSpotIntensity
    type: GroovyActorNode
    properties:
      actor.step: |
        print("Sample " + sampleId   + "    ");
        print("Image " + frameNumber + "    ");
        println("Average intensity: " + image.text);
      actor.inputs:
        image:
        sampleId:
        beamEnergy:
        frameNumber:
      inflows:
        image: file:/data/{sampleId}/image_{}_{frameNumber}.img


  - id: DataCollector
    type: GroovyActor
    properties:
      usesStepDirectory: true
      initialize: |
        random = new Random(1);
        _status.enableInput("runDefinition");
      step: |
        frame = String.format("%03d",imageCnt + 1);
        energy = runDefinition.energies[energyCnt];
        rawImage = new File(_status.getStepDirectory(), "raw_" + energy + "_" + frame + ".img");
        rawImage << random.nextInt(10000)/100.0;
        
        if (imageCnt > runDefinition.numImages -1) {
          imageCnt = 0; energyCnt ++;
          if (energyCnt > runDefinition.energies.size() - 1) {
              _status.enableInput('runDefinition');
              imageCnt = 0; energyCnt = 0;      
          }
        } else {
          imageCnt++;
        }
      state:
        imageCnt: 0
        energyCnt: 0
        random:
      inputs:
        runDefinition:
          defaultReadiness: false
          type: Map
      outputs:
        frame:
          type: Integer
        energy:
          type: Double
        rawImage:
          type: File