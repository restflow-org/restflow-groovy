
imports:
  - classpath:/org/restflow/groovy/actors.yaml
  - classpath:common/directors.yaml
  
components:

  - id: SampleScreening
    type: Workflow
    properties:
      director: !ref DemandDrivenDirector
      nodes:
        - !ref LoadScreeningResults
        - !ref ScoreGroup
        - !ref CollectDataSet

  - id: LoadScreeningResults
    type: GroovyActorNode
    properties:
      sequences:
        crystal:               
          - {sampleId: DRT110, group: "a", score: 1}
          - {sampleId: DRT322, group: "a", score: 4}
          - {sampleId: DRT240, group: "a", score: 3}          
          - {sampleId: DRT410, group: "b", score: 1}
          - {sampleId: DRT540, group: "b", score: 3}
          - {sampleId: DRT622, group: "b", score: 4}
          - {sampleId: DRT710, group: "c", score: 1}
          - {sampleId: DRT840, group: "c", score: 3}
          - {sampleId: DRT922, group: "c", score: 4}
          - {sampleId: DRT442, group: "d", score: 4}          
          - {sampleId: DRT420, group: "d", score: 1}
          - {sampleId: DRT430, group: "d", score: 3}
      actor.step: |
        name = crystal.sampleId
        group = crystal.group
        quality = crystal.score
      actor.outputs:
        name:
        quality:
        group:
      outflows: 
        quality: /sample/{group}/{name}/quality


  - id: ScoreGroup
    type: GroovyActorNode
    properties:
      actor.state:
        best:
        screened:
      actor.settings:
        groupCount:
          a: 3
          b: 3
          c: 3
          d: 3    
      actor.inputs:
        name:
        quality:
        group:
      actor.outputs:
        strategy:
        winner:        
      actor.initialize: |
        best = [:]
        screened = [:]
        groupCount.each { key,value->
          best[key] = [name:"", quality:0]
          screened[key] = 0
        }
      actor.step: |
        println "Evaluating sample $name.";
        screened[group] ++
        if ( quality > best[group].quality) {
          best[group] = [name: name, quality: quality];
        }
        //println "${screened[group]} == ${groupCount[group]}"
        if ( screened[group] == groupCount[group] ) {
           winner = best[group].name
           println "Sample $winner wins from group $group"
           strategy = "best"
          _status.setOutputEnable('strategy', true);
          _status.setOutputEnable('winner', true);          
        } else {
          _status.setOutputEnable('strategy', false);
          _status.setOutputEnable('winner', false);          
        }
      inflows:
        quality: /sample/{group}/{name}/quality
      outflows:
        strategy: /sample/{group}/{winner}/strategy

  - id: CollectDataSet
    type: GroovyActorNode
    properties: 
      inflows:
        runDefinition: /sample/{group}/{name}/strategy
      actor.step: |
        println "Collecting Best from Group $group : $name"
        run ="done"
      actor.inputs:
        group:
        name:
        runDefinition:
      actor.outputs:
        run:      
      outflows:
        run: /{name}/done
      


