
imports:
  - classpath:/org/restflow/groovy/actors.yaml
  - classpath:common/directors.yaml

components:

  - id: SimulateDataCollectionNestedParallel
    type: Workflow
    properties:
      director: !ref PublishSubscribeDirector
      nodes:
        - !lref MergeFeedback
        - !lref LoadScreeningResults
        - !lref CalculateStrategy
        - !lref CollectDataSets

  - id: MergeFeedback
    type: MergeNode
    properties:   
      inflows:
        input1: /feedback/rejected
        input2: /feedback/completed
      outflows: 
        output: /feedback/merged

  - id: LoadScreeningResults
    type: GroovyActorNode
    properties:
      constants:
        trigger: true
      sequences:
        crystal:               
          - {sampleId: DRT110, score: 1}
          - {sampleId: DRT240, score: 3}
          - {sampleId: DRT322, score: 4}
      actor.step: |
        name = crystal.sampleId; quality = crystal.score
      actor.inputs:
        crystal:
        trigger:
      actor.outputs:
        name:
        quality:
      inflows:
        trigger: /feedback/merged
      outflows:
        quality: /sample/{name}/quality

  - id: CalculateStrategy
    type: GroovyActorNode
    properties: 
      actor.inputs:
        name:
        quality:
      actor.outputs:
        id:
        reject:
        strategy:
      actor.step: |
        log "Evaluating sample $name.";
        id = name;
        if (quality < 3) {
          log "Sample $name rejected due to low quality score of $quality."
          _status.setOutputEnable('strategy', false);
          _status.disableOutput('id');
          reject = id;
          _status.setOutputEnable('reject', true);
        } else {
          _status.setOutputEnable('reject', false);
          strategy = [numImages: quality + 2, energies: [10000, 11000]];
          log "Requesting $strategy.numImages images for sample $name."
        }
      inflows:
        quality: /sample/{name}/quality
      outflows:
        id: /sample/id
        strategy: /sample/{name}/strategy
        reject: /feedback/rejected
      enableLog: true

  - id: CollectDataSets
    type: Node
    properties: 
      actor: !ref CollectDataSet
      nestedUriPrefix: /sample/{id}/data
      inflows:
        runDefinition: /sample/{id}/strategy
        sampleName: /sample/id
      outflows:
        done: /feedback/completed

  - id: CollectDataSet
    type: ParallelWorkflow
    properties:
      director: !ref PublishSubscribeDirector
      nodes:
        - !lref Inputs
        - !lref CollectImage
        - !lref TransformImage
        - !lref LogImage
        - !lref Outputs
      inputs:
        sampleName:
        runDefinition:
      outputs:
        done:

  - id: Inputs
    type: InPortal
    properties:
      outflows:
        sampleName: /sample 
        runDefinition: /strategy

  - id: CollectImage
    type: Node
    properties: 
      actor: !ref DataCollector
      inflows:
        sampleId: /sample
        runDefinition: /strategy
      outflows:
        rawImage: file:/raw/{energy}/{sampleId}_{frame}.raw
        done: /done
      
  - id: TransformImage
    type: GroovyActorNode
    properties:
      actor.step: |
        correctedImage = Double.parseDouble(rawImage.text) * 2.0;
      inflows:
        rawImage: /raw/{eV}/{sampleId}_{frameNumber}.raw
      outflows:
        correctedImage: file:/corrected/{sampleId}_{eV}_{frameNumber}.img

  - id: LogImage
    type: GroovyActorNode
    properties:
      actor.step: |
        log "Sample $sampleId    Energy $beamEnergy    Image $frameNumber    Average intensity: $image.text"
      actor.inputs:
        image:
        sampleId:
        beamEnergy:
        frameNumber:
      inflows:
        image: file:/corrected/{sampleId}_{beamEnergy}_{frameNumber}.img
      enableLog: true

  - id: Outputs
    type: OutPortal
    properties:
      inflows: 
        done: /done

  - id: DataCollector
    type: GroovyActor
    properties:
      usesStepDirectory: true
      initialize: |
        random = null;
        _status.enableInputs();
      step: |
        if (random == null) random = new Random(sampleId.hashCode());
        frame = String.format("%03d",imageCnt + 1);
        energy = runDefinition.energies[energyCnt];
        rawImage = new File(_status.getStepDirectory(), "raw_" + energy + "_" + frame + ".img");
        rawImage << random.nextInt(10000)/100.0;
        _status.disableOutput("done");
        if (imageCnt > runDefinition.numImages -1) {
          imageCnt = 0; energyCnt ++;
          if (energyCnt > runDefinition.energies.size() - 1) {
              _status.enableInputs();
              imageCnt = 0; energyCnt = 0;
              done = sampleId;
              _status.enableOutput("done");
          }
        } else {
          imageCnt++;
        }
      state:
        imageCnt: 0
        energyCnt: 0
        random:
      inputs:
        sampleId:
          defaultReadiness: false
        runDefinition:
          defaultReadiness: false
          type: Map
      outputs:
        frame:
          type: Integer
        energy:
          type: Double
        rawImage:
          type: File
        done:
          type: String