<%
//	-- externalize the edgeShortName business
//	# apt-get install graphviz
//	 ./eclipse-RestFlow -f src/test/resources/samples/behaviors/hamming.yaml
//	--to-dot > hamming.dot ; dot -Tpng hamming.dot > hamming.png
//	 ./eclipse-RestFlow -f src/test/resources/samples/behaviors/hamming.yaml
//	--to-dot > hamming.dot ; dot -Tps hamming.dot > hamming.ps
%>
<%
    println "digraph \"$workflow.beanName\" {"
    println 'node [shape=ellipse];'
     
    //add a method to WorkflowNode to strip off preceding namespace and module on node names.    
    def shortName = { return "\"" + it.name.tokenize('.')[-1] + "\"" };
    def binding = { return "\"" + it.uriTemplate.reducedPath + "\"" };    
    
    workflow.nodes.each() { node ->
      if ( node.hidden ) return;  //don't display buffer nodes
      if (( node instanceof org.restflow.nodes.InPortal ) || 
         ( node instanceof org.restflow.nodes.OutPortal ) ||
         ( node instanceof org.restflow.nodes.NonDeterministicMerge )) {
        println 'node [shape=ellipse];'
      } else if ( node.actor instanceof org.restflow.actors.Workflow )  {
        println 'node [shape=egg];'
      } else {
        //regular node
        println 'node [shape=ellipse];'
      }
	  println shortName(node) +";"	  	
	}
    println 'node [shape=box];'
    
	def edgeShortNames = [:];
	Integer edge = 1;

	workflow.nodes.each() { node -> 
		node.outflows.each() { key, outflow ->
			int e;
			if (edgeShortNames.containsKey(outflow.binding)) {
				e = edgeShortNames[outflow.binding]
			} else {
				e = ++edge;
				edgeShortNames[outflow.binding] = e
				println "  " + binding(outflow) + " [label = \"" + outflow.binding + "\"];"
			}
			println shortName(node) +" -> " + binding(outflow) + "[label=\"" + key + "\"];" 
		}
		node.inflows.each() { key, inflow ->
			int e;
			String l = inflow.binding
			if (edgeShortNames.containsKey(l)) {
				e = edgeShortNames[l]
			} else {
				e = ++edge;
				edgeShortNames[l]= e
				println "  " + binding(inflow) + " [label = \"" + l + "\"];"
			}
			println " " + binding(inflow) +" -> "+ shortName(node) +" [label=\"" + key + "\"]"
		}
	}
%>}
