components:

- id: RemoteGroovyActor
  type: GroovyActor
  properties:
    private:
      rpcServer: !lref XmlRpcServer
      actor: !inline
        type: GroovyActor
    preWorkflow: |
      import com.thoughtworks.xstream.*
      _xstream = new XStream()
      _xstream.classLoader = getClass().classLoader

      _this.copyValuesToSubordinate(actor);      

      rpcServer.addRpcs( actor );  
      
      _host = rpcServer.host
      _port = rpcServer.port
      _remoteCallCode = new GroovyShell().parse(rpcServer.client);
    initializeWrapper: |
      rpcServer.startServer();
      if ( _initialize == null) return;
      actorName = rpcServer.uniqueBeanName(actor);
      if ( actor.initializeWrapper == null ) {
        methodName = "initialize";
      } else {
        methodName = "initializeWrapper";
      }      
      _remoteCallCode.binding = getBinding();
      _remoteCallCode.run();
      returnBinding.getVariables().each { setProperty ( it.key, it.value ) }
    stepWrapper: |
      if ( _step == null) return;
      actorName = rpcServer.uniqueBeanName(actor);
      if ( actor.stepWrapper == null ) {
        methodName = "step";
      } else {
        methodName = "stepWrapper";
      }
      _remoteCallCode.binding = getBinding();
      _remoteCallCode.run();
      returnBinding.getVariables().each { setProperty ( it.key, it.value ) }
    wrapupWrapper: |
      if ( _wrapup == null) return;
      actorName = rpcServer.uniqueBeanName(actor);
      if ( actor.wrapupWrapper == null ) {
        methodName = "wrapup";
      } else {
        methodName = "wrapupWrapper";
      }
      _remoteCallCode.binding = getBinding();
      _remoteCallCode.run();
      returnBinding.getVariables().each { setProperty ( it.key, it.value ) }   

- id: javaRunner
  className: ssrl.impersonation.factory.JavaApiCommandFactory

- id: XmlRpcServer
  className: ssrl.rpc.GroovyXmlRpcServerFactory
  singleton: true
  properties:
    host: blcpu6
    port: 40010
    remoteServerStarter: !lref javaRunner
    #remoteClassPath: /home/scottm/workspace_3_5/RestFlow/bin/:/home/scottm/xml-rpc/groovy-xmlrpc-0.7.jar:/home/scottm/workspace_3_5/RestFlow//lib/snakeyaml-1.6.jar:/home/scottm/workspace_3_5/RestFlow//lib/xstream-1.2.2.jar
    remoteClassPath: /home/scottm/workspace_3_5/RestFlow/target/RestFlow-0.1.jar:/home/scottm/xml-rpc/groovy-xmlrpc-0.7.jar
    workingServerDirectory: /home/scottm/xml-rpc/
    serverPart1: |
      package org.restflow.actors
    
      import groovy.net.xmlrpc.XMLRPCServer
      import java.net.ServerSocket
      import com.thoughtworks.xstream.*
      import org.restflow.actors.ActorStatus
      import java.security.*
      import javax.crypto.*
      import javax.crypto.spec.*
      import org.apache.commons.codec.binary.Base64;
      import org.yaml.snakeyaml.Yaml;
      
      def server = new XMLRPCServer()
      def serverSocket = new ServerSocket(40010)

      def xstream = new XStream()
      xstream.classLoader = getClass().classLoader
      
      def yaml = new Yaml();
      InputStream config = new FileInputStream(new File(args[0]));
      def scripts = yaml.load(config);
      
      def privateKeyStr = scripts.get( "_privateKeyStr");
      byte[] keyBytes = Base64.decodeBase64(privateKeyStr.getBytes() );
      SecretKey key = new SecretKeySpec(keyBytes, "HmacSHA1");

      class ActorClosures {
      
          def xstream
          def key
          def scripts

          def runScript = { actorName, methodName, bindingStr, digestStr ->
          compareMessage( bindingStr, digestStr )
          def actor = scripts.get(actorName);
          if (actor == null) throw new Exception("unable to find actor for " + actorName);
          actor.precompile();
          
          def b = xstream.fromXML( bindingStr );
          //def b = new Yaml().load( bindingStr );
          
          //def BoundScript = new GroovyShell( b );
          def script = actor."${methodName}Script";
          
          b.setProperty("_script", actor.step );
          //b.setProperty("_outputs", actor.outputs );

          script.binding = b;          
          //BoundScript.evaluate( actor."${methodName}" ) ;
          script.run();
          
          b.setProperty("_script", null);
          def returnBindingStr = xstream.toXML( b );
          //def returnBindingStr = new Yaml().dump(b);
          return [ "binding": returnBindingStr ]
        }
        
      public byte[] signMessage(String message) throws Exception {
        try {
          def privateMac = Mac.getInstance("HmacSHA1");
          privateMac.init(key);

          privateMac.update(message.getBytes());
          return privateMac.doFinal();
        } catch (Exception e) {
          //logger.error(e.getStackTrace());
          throw e;
        }
      }

      public byte[] compareMessage(String message, String digest) throws Exception {
            
          def signedMessage = signMessage( message ).toString();

          if (signedMessage != digest) {
            new File("/home/scottm/xml-rpc/bindingError.txt").withWriter { file ->
              file.writeLine( signedMessage.toString() )
              
              file.writeLine( digest.toString() )
            }
            throw new Exception("digest does not match: ");
          }
      }

      }      
      server.runScript = new ActorClosures(scripts:scripts, key: key, xstream: xstream ).runScript
      server.KILL = {server.stopServer(); System.exit(1); return null; }      
      server.startServer(serverSocket)
      println "ready"
    client: |
      import groovy.net.xmlrpc.XMLRPCServerProxy
      import org.apache.commons.codec.binary.Base64;
      import org.yaml.snakeyaml.Yaml;
      
      def serverProxy = new XMLRPCServerProxy("http://" + _host + ":" + _port )

      def bindingCopy = new groovy.lang.Binding()
      getBinding().getVariables().each { 
        if ( it.key == "rpcServer" ) return;
        if ( it.key == "actor" ) return;
        if ( it.key == "_this" ) return;
        if ( it.key == "_step" ) return;
        //if ( it.key == "_inputs" ) return;
        //if ( it.key == "_outputs" ) return;
        if ( it.key == "_wrapup" ) return;
        if ( it.key == "_initialize" ) return;
        if ( it.key == "_host" ) return;
        if ( it.key == "_port" ) return;
        if ( it.key == "stepProxyName" ) return;
        if ( it.key == "initializeProxyName" ) return;
        if ( it.key == "wrapupProxyName" ) return;
        if ( it.key == "_remoteCallCode" ) return;
        if ( it.key == "_xstream" ) return;        
        if ( it.key == "_resultMap" ) return;    
        if ( it.key == "returnBinding" ) return;    
        bindingCopy.setProperty ( it.key, it.value )
      }

      def bindingStr = _xstream.toXML(bindingCopy );
      //def bindingStr = new Yaml().dump( bindingCopy );

      def message = rpcServer.signMessage(bindingStr);

      //  String digestStr = Base64.encodeBase64( message.getBytes() ).toString() ;
      String digestStr = message.toString() ;
      
      _resultMap = serverProxy.runScript ( actorName, methodName ,  bindingStr , digestStr )

      returnBinding = _xstream.fromXML( _resultMap["binding"] );
      //returnBinding = new Yaml().load( _resultMap["binding"] );
    launchServer: |
      //write this script to a local file (done)
      //write server code to local file (done)
      //run this script via impersonation daemon locally
      //scp server code to remote host
      String rpcServer = args[0]
      String host = args[1]
      String port = args[2]
      String remoteClassPath = args[3]
      String rpcServerConfig = args[4]      
      
      if ( host != "localhost" ) {
        String remoteRpcServerFileName = rpcServer +".remote"
        scpCmd = "scp " + rpcServer + " " + host + ":" + remoteRpcServerFileName
        scpCmd.execute()
        scpCmd = "scp " + rpcServerConfig + " " + host + ":" + rpcServerConfig
        scpCmd.execute()

        cmd = "ssh -x " + host + " groovy -cp " + remoteClassPath + " " + remoteRpcServerFileName + " " + rpcServerConfig+ " & "

        proc = cmd.execute();
        inStream = new InputStreamReader (proc.in);
      
        BufferedReader bin= new BufferedReader(inStream);
        println bin.readLine();
        if ( bin.readLine() != "ready" ) {
          println proc.err.text;
        }
      } else {
        cmd = "groovy -cp " + remoteClassPath + " " + rpcServer + " & "
        proc = cmd.execute();        
        inStream = new InputStreamReader (proc.in);
      
        BufferedReader bin= new BufferedReader(inStream);
        println proc.pid
        println bin.readLine();
      }
    killServer: |
      import groovy.net.xmlrpc.XMLRPCServerProxy
      import com.thoughtworks.xstream.*
      def serverProxy = new XMLRPCServerProxy("http://" + host + ":" + port);
      _resultMap = serverProxy.KILL ()


      