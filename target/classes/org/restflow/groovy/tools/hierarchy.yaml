namespace:

  module: Visualize

imports:

- classpath:/common/java/actors.yaml
- classpath:/common/directors.yaml
- classpath:/common/types.yaml 
- classpath:/common/support.yaml

types:

components:

- id: WorkflowHierarchy
  type: Workflow
  properties: 
    director: !ref PublishSubscribeDirector
    inputs:
      workflowName:
      restflowFile:
    nodes:
    - !lref Inputs  
    - !lref WorkflowLoader
    - !lref GenerateFlatWorkflowList
    - !lref GenerateDot
    - !lref ConvertDotToPostScript
    - !lref ConvertPostscriptToGif
    - !lref StepForEachWorkflow
    - !lref GenerateHierarchy

- id: Inputs
  type: InPortal
  properties:
    outflows:
      workflowName: /workflowName/
      restflowFile: /restflowFile/


- id: WorkflowLoader
  type: Node
  properties:
    maxConcurrency: 1
    ordered: false
    actor: !inline 
      type: ActorLoader
    constants:      
      director: !ref PublishSubscribeDirector
      runDirectory: context:/run   
      suppressElaboration: true
    inflows:
      actorName: /workflowName/
      restflowFile: /restflowFile
      importMap: context:/import-map
    outflows:
      actor: /actor/{actorName}
    exceptions:
      java.lang.Exception: stderr:/exception/load/

- id: GenerateFlatWorkflowList
  type: GroovyActorNode
  properties:
    inflows:
      workflow: /actor/{actorName}
    actor.step: |
        workflows = [:];
        workflows[ "$workflow.beanName" ]= workflow;

        def generateHierarchy (actor) {
          //replace the workflow director with one that will not add buffers nodes
          actor.director = new org.restflow.directors.PublishSubscribeDirector(); 

          actor.nodes.each() { node ->
            if ( node.hidden ) return;
            if ( node instanceof org.restflow.nodes.InPortal ) return;
            if ( node instanceof org.restflow.nodes.OutPortal ) return;
            if ( node instanceof org.restflow.nodes.NonDeterministicMerge ) return;
            if ( node.actor instanceof org.restflow.actors.Workflow ) {
              workflows[ "$node.actor.beanName" ] = node.actor;
              generateHierarchy( node.actor );
            }
          }
        }
        generateHierarchy(workflow);
        workflow.elaborate();
    outflows:
      workflows: /workflows/{actorName}/

- id: StepForEachWorkflow
  type: Node
  properties:
    inflows:
      map: /workflows/{actorName}/
    actor: !ref MapDisassembler
    outflows:
      item: /workflow_obj/{key}/object


- id: GenerateDot
  type: Node
  properties:
    maxConcurrency: 1
    actor: !inline
      className: org.restflow.groovy.GroovyTemplateActor
    constants:
      _template: !resource classpath:ssrl/restflow/templates/dotWorkflow.txt
    inflows:
      workflow: /workflow_obj/{actorName}/object
    outflows:
      view: file:/dot-file/{actorName}.dot
    exceptions:
      java.lang.Exception: stderr:/exception/generateDot/

- id: ConvertDotToPostScript
  type: GroovyActorNode
  properties:
    maxConcurrency: 1
    inflows:
      dot: file:/dot-file/{workflow}.dot
    actor.usesStepDirectory: true
    actor.inputs:
      workflow:
      dot:    
    actor.step: |
      println workflow
      def dotCmd = [ 'dot', '-Tps', dot.path, '-o', dot.parent + '/out.ps' ];
      println dotCmd;
      ProcessBuilder pb = new ProcessBuilder(dotCmd).redirectErrorStream(true).directory(_status.stepDirectory);
      postscript = pb.start().text;
      psFile = new File( _status.stepDirectory.toString() + '/out.ps');
    outflows:
      psFile: file:/ps/{workflow}/image.ps

- id: ConvertPostscriptToGif
  type: GroovyActorNode
  properties:
    maxConcurrency: 1
    inflows:
      psFile: file:/ps/{workflow}/image.ps
    actor.usesStepDirectory: true
    actor.inputs:
      workflow:
      psFile:    
    actor.step: |
      def gifPath =  _status.stepDirectory.toString() + "/" + workflow + ".gif";
      def gifCmd = [ 'convert', psFile.path, gifPath ];
      println gifCmd;
      ProcessBuilder pb = new ProcessBuilder(gifCmd).redirectErrorStream(true).directory(_status.stepDirectory);
      println pb.start().text;
      gifFile = new File( gifPath );
    outflows:
      gifFile: file:/gif/{workflow}.gif


- id: GenerateHierarchy
  type: Node
  properties:
    maxConcurrency: 1
    actor: !inline
      className: org.restflow.groovy.GroovyTemplateActor
    constants:
      _template: |
        <%
        def generateHierarchy (actor) {
          println "<ul>"
          actor.nodes.each() { node ->
            if ( node.hidden ) return;
            if ( node instanceof org.restflow.nodes.InPortal ) return;
            if ( node instanceof org.restflow.nodes.OutPortal ) return;
            if ( node instanceof org.restflow.nodes.NonDeterministicMerge ) return;
            println "<li>"
            println node.beanName;
            if ( node.actor instanceof org.restflow.actors.Workflow ) {
               println "<i>"
               println "<a href=\"../gif/" + node.actor.beanName + ".gif\">"+ node.actor.beanName +"</a>";
               println "</i>"
               generateHierarchy(node.actor);
            } else {
               println "<i>"
               println node.actor.beanName;
               println "</i>"
            }
            println "</li>"
          }
          println "</ul>"
        }
        println "<h3>$workflow.beanName</h3>"
        println "<ul><li>"
        println workflow.beanName;
        println "<i><a href=\"../gif/" + workflow.beanName + ".gif\">"+ workflow.beanName +"</a></i>";
        
        generateHierarchy(workflow);
        println "</li></ul>"
        %>
    inflows:
      workflow: /actor/{actorName}
    outflows:
      structure: file:/hierarchy/{actorName}.html

